@startuml
'https://plantuml.com/use-case-diagram
!theme cerulean
skinparam style strictuml
skinparam classFontStyle Bold
skinparam classAttributeIconSize 0
hide empty members

package Entites{
    class Entite{
        - m_x:Integer
        - m_y:Integer
        - {static} m_entites : List<Entite>
        + <<create>> Entite(x : Integer, y: Integer)
        + getX() : Integer
        + getY() : Integer
        + {static} getM_entites() : List<Entite>
        + estBloquant() : boolean
        + setPosition(x : Integer, y : Integer)
        + caseOccupee(x : Integer, y : Integer)
    }

    package Equipements
    {

        ' Class Arme
      class Arme{
        - m_nom : String
        - m_portee : Integer
        + <<create>> Arme(type: TypeArme, nom: String , Dedegats: De , portee: Integer)
        + getM_typeArme() : TypeArme
        + getM_nomArme() : String
        + getM_degats(): De
        + getM_portee(): Integer
        + toString() : String
      }
      enum TypeArme <<enumerate>>
      {
        COURANTE
        DISTANCE
        GUERRE
      }
      ' Class Armure
      class Armure{
        -m_nom : String
        - m_classeArmure : int
        + <<create>> Armure(typeArmure : TypeArmure, nom : String, classeArmure : Integer)
        + getM_classeArmure() : Integer
        + getM_nom() : String
        + getM_typeArmure() : TypeArmure
        + toString() : String
      }

      enum TypeArmure <<enumerate>>
      {
        LEGERE
        LOURDE
      }
    }

    package Personnages {
        class Personnage{
            -m_nom : String
            -m_pv : Integer
            -m_pvMax : Integer
            -m_force : Integer
            -m_dexterité : Integer
            -m_vitesse : Integer
            -m_initiative : Integer
            + <<create>> Personnage(nom : String, pv : Integer, x : Integer, y : Integer)
            + setPosition(x : Integer, y : Integer)
            + seDeplacer(donjon : Donjon):void
            + saisirPositionValide(maxX : Integer, maxY : Integer) : Integer[]
            + abstract attaquer() : void
            + getM_nom() : String
            + getM_pv() : Integer
            + getM_pvMax() : Integer
            + getM_force() : Integer
            + getM_dexterite() : Integer
            + getM_vitesse() : Integer
            + getM_initiative : Integer
            + setM_pv(pv : Integer) : void
            + setM_force(force : Integer) : void
            + setM_dexterite(dexterite : Integer) : void
            + setM_vitesse(dexterite : Integer) : void

        }
        package Joueurs {
            class Joueur{
                +<<create>>Joueur(nom : String, classe : Classe, race : Race, x : Integer, y : Integer)
                +setPosition(x : Integer, y : Integer)
                +Equiper() : void
                +attaquer() : void
                +ramasser():void
                +commenter():void
                +mjCommenter():void
                +toString() : String
            }

            class ClasseJoueur {
               - m_nomClass: String
               - m_pv: Integer
               - <<create>> ClasseJoueur(nom : String, pv : Integer, armes: Armes[*], armures: Armure[*])
               + {static} Clercs() : ClasseJoueur
               + {static} Guerriers() : ClasseJoueur
               + {static} Magiciens() : ClasseJoueur
               + {static} Roublards() : ClasseJoueur
               + getM_nomClass() : String
               + getM_pv() : Integer
               + getM_armes() : Arme[*]
               + getM_armures() : Armure[*]
               + toString() : String
            }

            class Race {
              - m_nomRace: String
              - m_bonusForce: Integer
              - m_bonusDexterite: Integer
              - m_bonusVitesse: Integer
              - <<create>> Race(nom: String, force: Integer, dex: Integer, vitesse: Integer)
              + getM_nomRace(): String
              + getM_BonusForce(): Integer
              + getM_BonusDexterite(): Integer
              + getM_BonusVitesse(): Integer
              + {static} Elfe(): Race
              + {static} Halfelin(): Race
              + {static} Humain(): Race
              + {static} Nain(): Race
              + toString() : String
            }
        }
        package Monstres {
            class Monstre {
                - m_numero : Integer
                + <<create>> Monstre(race : RaceMonstre, numero : Integer, x : Integer, y : Integer)
                + attaquer() : void
                + getM_race : RaceMonstre
                + toString() : String
            }

            class RaceMonstre {
                - m_nom : String
                - m_pv : Integer
                - m_classeArmure : Integer
                - m_portee : Integer
                - m_degats : Intege
                - <<create>> RaceMonstre(nom: String, pv : Integer, classeArmure : Integer, portee : Integer, degats : Integer, de : De)
                + {static} Dragon(): RaceMonstre
                + {static} Demogorgon(): RaceMonstre
                + getM_pv() : Integer
                + getM_nom : String
                + getM_degats : Integer
                + getM_portee : Integer
                + getM_classeArmure
                + toString() : String
            }
        }

        class Obstacle {
            + Obstacle(x : Integer, y : Integer)
        }
    }
}
package utils
{
  class Donjon{
    - m_longueur : Integer
    - m_largeur : Integer
    - m_playerssOnGround : ArrayList<Personnage>
    + <<Create>> Donjon()
    + addEntityOnGround : void
    + printLine(longueur : Integer)
    + DonjonGround() : void
    + getM_longueur() : Integer
    + getM_largeur() : Integer
  }

  class Utils <<static>>{
    + {static} dico : Map<Character, Integer>
  }
  class De
  {
    - m_nombreDes : Integer
    - m_facesParDe: Integer
    + <<create>> De(nombreDes : Integer, facesParDe : Integer)
    + lanceDe(): Integer
    + lanceDePrint(): Integer
    + toString(): String
  }
}

' Relations de Personnage
Personnage <|-- Joueur
Personnage <|-- Monstre
Personnage .> Donjon : "uses"
Personnage .> Utils : "«call»"

' Relations de Entite
Entite <|-- Personnage
Entite <|-- Arme
Entite <|-- Armure
Entite <|-- Obstacle
Entite "1" o--> "*" Entite : -m_entites
Entite ..> Arme : "uses"
Entite ..> Armure : "uses"


' Relations de ClasseJoueur
ClasseJoueur "1\nm_armes  " *----> "*" Arme:est dans les armes de base de >
ClasseJoueur "1\nm_armures" *----> "*\n" Armure : est dans les armures de base de >

' Relations de Joueur

Joueur "1" o--> "0..1" Arme : -m_arme\nporte une arme
Joueur "1" o--> "0..1" Armure : -m_armure\nporte une armure
Joueur "1" o--> "1" Race : -m_race\nest de la race
Joueur "1" o--> "1" ClasseJoueur : -m_classe\na pour classe
Joueur ..> De : "uses"
Joueur ..> Monstre : "uses"

' Relations de Monstre
Monstre "1" o--> "1" RaceMonstre : -m_race\nest de la race
Monstre ..> Joueur : "uses"

' Relations de RaceMonstre
RaceMonstre "1" *--> "1" De : -m_deDegats\nfait les degats

' Class Arme Relations
Arme .> TypeArme : "«uses»\n m_typeArme"
Arme "1" *--> "1\n -m_degats" De : fait les dégâts
' Class Armure Relations
Armure .> TypeArmure : "«uses»\n m_typeArmure"

' Class Donjon Relations
Donjon "1" o--> "*" Personnage : -m_playerssOnGround\ncontient des personnages

@enduml