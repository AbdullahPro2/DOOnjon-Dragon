@startuml
'https://plantuml.com/use-case-diagram
skinparam style strictuml
skinparam classFontStyle Bold
skinparam classAttributeIconSize 0
skinparam linetype ortho
hide empty members
package Entites{
    abstract class Entite {
        - m_x:Integer
        - m_y:Integer
        - {static} m_entites : List<Entite>
        + <<Create>> Entite(x : Integer, y: Integer)
        + getM_x() : Integer
        + getM_y() : Integer
        + setM_entites()
        + {static} getM_entites() : List<Entite>
        + ramasser(Joueur : joueur)
        + estBloquant() : boolean
        + setPosition(x : Integer, y : Integer)
        + caseOccupee(x : Integer, y : Integer)
    }

    package Equipements
    {
      ' Class Arme
      class Arme{
        - m_nom : String
        - m_portee : Integer
        - m_bonusAttaque : Integer
        + <<Create>> Arme(type: TypeArme, nom: String , Dedegats: De , portee: Integer, x : Integer, y : Integer)
        + ramasser(joueur : Joueur)
        + getM_typeArme() : TypeArme
        + getM_nom() : String
        + getM_degats(): De
        + getM_portee(): Integer
        + getM_bonusAttaque() : Integer
        + toString() : String
      }
      enum TypeArme <<enumerate>>
      {
        COURANTE
        DISTANCE
        GUERRE
      }
      ' Class Armure
      class Armure{
        - m_nom : String
        - m_classeArmure : int
        + <<Create>> Armure(typeArmure : TypeArmure, nom : String, classeArmure : Integer, x : Integer; y : Integer)
        + ramasser(joueur : Joueur)
        + getM_classeArmure() : Integer
        + getM_nom() : String
        + getM_typeArmure() : TypeArmure
        + toString() : String
      }
      enum TypeArmure <<enumerate>>
      {
        LEGERE
        LOURDE
      }
    }
    package Personnages {
        abstract class Personnage{
            -m_nom : String
            -m_pv : Integer
            -m_pvMax : Integer
            -m_force : Integer
            -m_dexterit√© : Integer
            -m_vitesse : Integer
            -m_initiative : Integer
            + <<Create>> Personnage(nom : String, pv : Integer, x : Integer, y : Integer)
            + setPosition(x : Integer, y : Integer)
            + seDeplacer(donjon : Donjon
            + saisirPositionValide(maxX : Integer, maxY : Integer) : Integer[]
            + {abstract} attaquer()
            + commenterDeplacement(x : Integer, y : Integer)
            + getM_nom() : String
            + getM_pv() : Integer
            + getM_pvMax() : Integer
            + getM_force() : Integer
            + getM_dexterite() : Integer
            + getM_vitesse() : Integer
            + getM_initiative() : Integer
            + setM_pv(pv : Integer)
            + setM_force(force : Integer)
            + setM_dexterite(dexterite : Integer)
            + setM_vitesse(dexterite : Integer)
            + afficheApresTour() : String
            + toString() : String
        }
        package Joueurs {
            class Joueur{
                +<<Create>>Joueur(nom : String, classe : Classe, race : Race, x : Integer, y : Integer)
                +getDisplaySymbol() : String
                +getM_armure() : Armure
                +getM_classe() : ClasseJoueur
                +getM_race() : Race
                +setPosition(x : Integer, y : Integer)
                +equiper(choix : String)
                +equiperChoix()
                +equiperDepart()
                +attaquer(donjon : Donjon)
                +ramasser(donjon : Donjon)
                +droitLanceSort() : Boolean
                +lanceSort(donjon : Donjon)
                +sortGuerison(donjon : Donjon)
                +sortBoogieWoogie(donjon : Donjon)
                +sortArmeMagique(donjon : Donjon)
                +afficheApresTour(donjon : Donjon) : String
                +inventaireAffichage() : String
                +actionAffichage(actionRestantes : Integer)
                +executerTour(donjon : Donjon)
                +afficheTourInformation() : String
                +retirerDuDonjon(donjon : Donjon)
                +toString() : String
            }
            class ClasseJoueur {
               - m_nomClass: String
               - m_pv: Integer
               - <<Create>> ClasseJoueur(nom : String, pv : Integer, armes: Armes[*], armures: Armure[*])
               + {static} Clercs() : ClasseJoueur
               + {static} Guerriers() : ClasseJoueur
               + {static} Magiciens() : ClasseJoueur
               + {static} Roublards() : ClasseJoueur
               + getM_nomClass() : String
               + getM_pv() : Integer
               + getM_armes() : Arme[*]
               + getM_armures() : Armure[*]
               + toString() : String
            }

            class Race {
              - m_nomRace: String
              - m_bonusForce: Integer
              - m_bonusDexterite: Integer
              - m_bonusVitesse: Integer
              - <<Create>> Race(nom: String, force: Integer, dex: Integer, vitesse: Integer)
              + getM_nomRace(): String
              + getM_BonusForce(): Integer
              + getM_BonusDexterite(): Integer
              + getM_BonusVitesse(): Integer
              + {static} Elfe(): Race
              + {static} Halfelin(): Race
              + {static} Humain(): Race
              + {static} Nain(): Race
              + toString() : String
            }
        }
        package Monstres {
            class Monstre {
                - m_numero : Integer
                + <<Create>> Monstre(race : RaceMonstre, numero : Integer, x : Integer, y : Integer)
                + getDisplaySymbol() : String
                + attaquer(donjon : Donjon)
                + getM_race : RaceMonstre
                + executerTour(donjon : Donjon)
                + afficheApresTour() : String
                + actionAffichage(actionRestantes : Integer) :
                + retirerDuDonjon(donjon : Donjon)
                + afficheTourInformation() : String
                + toString() : String
            }

            class RaceMonstre {
                - m_nom : String
                - m_pvRace : Integer
                - m_classeArmure : Integer
                - m_portee : Integer
                - m_degats : Integer
                - <<Create>> RaceMonstre(nom: String, pv : Integer, classeArmure : Integer, portee : Integer, degats : Integer, de : De)
                + {static} Dragon(): RaceMonstre
                + {static} Demogorgon(): RaceMonstre
                + getM_pvRace() : Integer
                + getM_nom() : String
                + getM_degats() : Integer
                + getM_portee() : Integer
                + getM_classeArmure() : Integer
                + getM_deDegats() : De
                + toString() : String
            }
        }

        class MaitreJeu {

        }

    }

    class Obstacle {
        + Obstacle(x : Integer, y : Integer)
    }
}
package utils
{
  class Utils <<static>>{
    + {static} dico : Map<Character, Integer>
    + {static} dico2 : Map<Integer,Character>
    + {static} joueurEstMort() : Boolean
  }
  class De
  {
    - m_nombreDes : Integer
    - m_facesParDe: Integer
    + <<Create>> De(nombreDes : Integer, facesParDe : Integer)
    + lanceDe(): Integer
    + lanceDePrint(): Integer
    + toString(): String
  }
}
package deroulement {
           abstract class Donjon <<abstract>>{
                # m_longueur : Integer
                # m_largeur : Integer
                + <<Create>> Donjon(longueur : Integer, largeur : Integer)
                + addEquipementOnGround(ent : Entite)
                + addMonstreOnGround(m : Monstre)
                + addObstacleOnGround(o : Obstacle)
                + getM_joueurOnGround() : Joueur[*]
                + getM_monstreOnGround() : Monstre[*]
                + getM_equipementOnGround() : Entite[*]
                + getM_obstacleOnGround() : Obstacle[*]
                + getM_largeur() : Integer
                + getM_longueur() : Integer
                - printLine()
                + display()
                + {abstract} getStartingCoordinates(i : Integer) : Integer[]
                + {abstract} createDonjon()
            }
           class EasyDonjon extends Donjon {
                + <<Create>> EasyDonjon()
                + getStartingCoordinates(i : Integer) : Integer[2]
                + createDonjon()
                + display()
           }
           class MediumDonjon extends Donjon {
                            + <<Create>> MediumDonjon()
                            + getStartingCoordinates(i : Integer) : Integer[2]
                            + createDonjon()
                            + display()
           }
           class HardDonjon extends Donjon {
                                       + <<Create>> HardDonjon()
                                       + getStartingCoordinates(i : Integer) : Integer[2]
                                       + createDonjon()
                                       + display()
           }
           class StartGame {
               + startGame()
               - printTourInformation(difficulty : Integer, tour : Integer, courant : Personnage)
               - tousMonstresMorts() : Boolean
               - sortInitiativeOrder()
               - launchDonjon(choice : Integer)
               + createPlayers(nbJoueurs : Integer)
               + updatePlayerPosition()
               # askPlayerName(i : Integer) : String
               # askRace(nom : String) : Race
               # askClass(nom : String) : ClasseJoueur
           }

}

' Donjon Relations
Donjon "1" *--> "* \n-m_equipementOnGround" Entite : contient \t\t >
Donjon "1" *--> "1..* \n-m_joueurOnGround" Joueur : contient \t\t >
Donjon "1" *--> "1..* \n-m_monstreOnGround" Monstre : contient \t\t >
Donjon "1" *--> "* \n-m_obstacleOnGround" Obstacle : contient \t\t >


' Class Startgame Relations
StartGame "1 " *--> "1 " Donjon : - m_donjon
StartGame .> ClasseJoueur: "call"
StartGame .> Race: "call"
StartGame .> ClasseJoueur: "uses"
StartGame .> Race: "uses"
StartGame "*" o--> "2..*\n-m_initiativeOrder" Personnage : contient les personnages \t\t >
StartGame "1" o--> "1..* \n-m_joueurs" Joueur : contient les joueurs \t\t >
StartGame "1" *--> "1\n-m_maitreJeu" MaitreJeu : possedeUn \t\t >
StartGame .> Monstre : "uses"

' Relations de Personnage
Personnage <|-up- Joueur
Personnage <|-up- Monstre
Personnage .> Donjon : "uses"
Personnage .> Utils : "¬´call¬ª"

' Relations de Entite
Entite <|-up- Personnage
Entite <|-up- Arme
Entite <|-up- Armure
Entite <|-up- Obstacle
Entite "1" o--> "*" Entite : -m_entites
Entite ..> Arme : "uses"
Entite ..> Armure : "uses"


' Relations de ClasseJoueur
ClasseJoueur "1\nm_armes  " *----> "*" Arme : est l'inventaire d'arme de >
ClasseJoueur "1\nm_armures" *----> "*\n" Armure : est est l'inventaire d'armures de >

' Relations de Joueur

Joueur "1" o--> "0..1" Arme : -m_arme\nporte une arme >
Joueur "1" o--> "0..1" Armure : -m_armure\nporte une armure >
Joueur "1" o--> "1" Race : -m_race\nest de la race >
Joueur "1" o--> "1" ClasseJoueur : -m_classe\na pour classe >
Joueur "1" o--> "1" Affichage : -m_affichage\utilise l'affichage de >
Joueur ..> Donjon : "uses"
Joueur ..> De : "uses"
Joueur ..> Monstre : "uses"

' Relations de Monstre
Monstre "1" o--> "1" RaceMonstre : -m_race\nest de la race
Monstre ..> Joueur : "uses"

' Relations de RaceMonstre
RaceMonstre "1" *--> "1" De : -m_deDegats\nfait les degats

' Class Arme Relations
Arme .> TypeArme : "uses \n -m_typeArme"
Arme "1" *--> "1\n -m_degats" De : fait les d√©g√¢ts
Arme .> Joueur : "uses"
'Class Armure Relations
Armure .> TypeArmure : "¬´uses¬ª\n m_typeArmure"
Armure .> Joueur : "uses"


@enduml